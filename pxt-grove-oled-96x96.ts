/**
 * Functions for the greyscale OLED from Seeed Studio (96x96 pixel)
 */
//% weight=98 color=#0fbc11 icon="\uf108" block="OLED (96x96)"
//% parts="oled_96x96"
namespace custom {
    const i2cAddress: number = 0x3C
    const commandMode: number = 0x8000
    const dataMode: number = 0x4000
    const basicFont: int8[] = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // " "
        0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, // "!"
        0x00, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, // """
        0x00, 0x14, 0x7F, 0x14, 0x7F, 0x14, 0x00, 0x00, // "#"
        0x00, 0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x00, 0x00, // "$"
        0x00, 0x23, 0x13, 0x08, 0x64, 0x62, 0x00, 0x00, // "%"
        0x00, 0x36, 0x49, 0x55, 0x22, 0x50, 0x00, 0x00, // "&"
        0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0x00, 0x00, // "'"
        0x00, 0x1C, 0x22, 0x41, 0x00, 0x00, 0x00, 0x00, // "("
        0x00, 0x41, 0x22, 0x1C, 0x00, 0x00, 0x00, 0x00, // ")"
        0x00, 0x08, 0x2A, 0x1C, 0x2A, 0x08, 0x00, 0x00, // "*"
        0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, 0x00, // "+"
        0x00, 0xA0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, // ","
        0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, // "-"
        0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, // "."
        0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00, // "/"
        0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00, 0x00, // "0"
        0x00, 0x00, 0x42, 0x7F, 0x40, 0x00, 0x00, 0x00, // "1"
        0x00, 0x62, 0x51, 0x49, 0x49, 0x46, 0x00, 0x00, // "2"
        0x00, 0x22, 0x41, 0x49, 0x49, 0x36, 0x00, 0x00, // "3"
        0x00, 0x18, 0x14, 0x12, 0x7F, 0x10, 0x00, 0x00, // "4"
        0x00, 0x27, 0x45, 0x45, 0x45, 0x39, 0x00, 0x00, // "5"
        0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30, 0x00, 0x00, // "6"
        0x00, 0x01, 0x71, 0x09, 0x05, 0x03, 0x00, 0x00, // "7"
        0x00, 0x36, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00, // "8"
        0x00, 0x06, 0x49, 0x49, 0x29, 0x1E, 0x00, 0x00, // "9"
        0x00, 0x00, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, // ":"
        0x00, 0x00, 0xAC, 0x6C, 0x00, 0x00, 0x00, 0x00, // ";"
        0x00, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00, 0x00, // "<"
        0x00, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 0x00, // "="
        0x00, 0x41, 0x22, 0x14, 0x08, 0x00, 0x00, 0x00, // ">"
        0x00, 0x02, 0x01, 0x51, 0x09, 0x06, 0x00, 0x00, // "?"
        0x00, 0x32, 0x49, 0x79, 0x41, 0x3E, 0x00, 0x00, // "@"
        0x00, 0x7E, 0x09, 0x09, 0x09, 0x7E, 0x00, 0x00, // "A"
        0x00, 0x7F, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00, // "B"
        0x00, 0x3E, 0x41, 0x41, 0x41, 0x22, 0x00, 0x00, // "C"
        0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C, 0x00, 0x00, // "D"
        0x00, 0x7F, 0x49, 0x49, 0x49, 0x41, 0x00, 0x00, // "E"
        0x00, 0x7F, 0x09, 0x09, 0x09, 0x01, 0x00, 0x00, // "F"
        0x00, 0x3E, 0x41, 0x41, 0x51, 0x72, 0x00, 0x00, // "G"
        0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00, 0x00, // "H"
        0x00, 0x41, 0x7F, 0x41, 0x00, 0x00, 0x00, 0x00, // "I"
        0x00, 0x20, 0x40, 0x41, 0x3F, 0x01, 0x00, 0x00, // "J"
        0x00, 0x7F, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00, // "K"
        0x00, 0x7F, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, // "L"
        0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F, 0x00, 0x00, // "M"
        0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F, 0x00, 0x00, // "N"
        0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00, 0x00, // "O"
        0x00, 0x7F, 0x09, 0x09, 0x09, 0x06, 0x00, 0x00, // "P"
        0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E, 0x00, 0x00, // "Q"
        0x00, 0x7F, 0x09, 0x19, 0x29, 0x46, 0x00, 0x00, // "R"
        0x00, 0x26, 0x49, 0x49, 0x49, 0x32, 0x00, 0x00, // "S"
        0x00, 0x01, 0x01, 0x7F, 0x01, 0x01, 0x00, 0x00, // "T"
        0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00, 0x00, // "U"
        0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F, 0x00, 0x00, // "V"
        0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F, 0x00, 0x00, // "W"
        0x00, 0x63, 0x14, 0x08, 0x14, 0x63, 0x00, 0x00, // "X"
        0x00, 0x03, 0x04, 0x78, 0x04, 0x03, 0x00, 0x00, // "Y"
        0x00, 0x61, 0x51, 0x49, 0x45, 0x43, 0x00, 0x00, // "Z"
        0x00, 0x7F, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00, // "["
        0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00, // "\"
        0x00, 0x41, 0x41, 0x7F, 0x00, 0x00, 0x00, 0x00, // "]"
        0x00, 0x04, 0x02, 0x01, 0x02, 0x04, 0x00, 0x00, // "^"
        0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, // "_"
        0x00, 0x01, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, // "`"
        0x00, 0x20, 0x54, 0x54, 0x54, 0x78, 0x00, 0x00, // "a"
        0x00, 0x7F, 0x48, 0x44, 0x44, 0x38, 0x00, 0x00, // "b"
        0x00, 0x38, 0x44, 0x44, 0x28, 0x00, 0x00, 0x00, // "c"
        0x00, 0x38, 0x44, 0x44, 0x48, 0x7F, 0x00, 0x00, // "d"
        0x00, 0x38, 0x54, 0x54, 0x54, 0x18, 0x00, 0x00, // "e"
        0x00, 0x08, 0x7E, 0x09, 0x02, 0x00, 0x00, 0x00, // "f"
        0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C, 0x00, 0x00, // "g"
        0x00, 0x7F, 0x08, 0x04, 0x04, 0x78, 0x00, 0x00, // "h"
        0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, // "i"
        0x00, 0x80, 0x84, 0x7D, 0x00, 0x00, 0x00, 0x00, // "j"
        0x00, 0x7F, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00, // "k"
        0x00, 0x41, 0x7F, 0x40, 0x00, 0x00, 0x00, 0x00, // "l"
        0x00, 0x7C, 0x04, 0x18, 0x04, 0x78, 0x00, 0x00, // "m"
        0x00, 0x7C, 0x08, 0x04, 0x7C, 0x00, 0x00, 0x00, // "n"
        0x00, 0x38, 0x44, 0x44, 0x38, 0x00, 0x00, 0x00, // "o"
        0x00, 0xFC, 0x24, 0x24, 0x18, 0x00, 0x00, 0x00, // "p"
        0x00, 0x18, 0x24, 0x24, 0xFC, 0x00, 0x00, 0x00, // "q"
        0x00, 0x00, 0x7C, 0x08, 0x04, 0x00, 0x00, 0x00, // "r"
        0x00, 0x48, 0x54, 0x54, 0x24, 0x00, 0x00, 0x00, // "s"
        0x00, 0x04, 0x7F, 0x44, 0x00, 0x00, 0x00, 0x00, // "t"
        0x00, 0x3C, 0x40, 0x40, 0x7C, 0x00, 0x00, 0x00, // "u"
        0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C, 0x00, 0x00, // "v"
        0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C, 0x00, 0x00, // "w"
        0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x00, // "x"
        0x00, 0x1C, 0xA0, 0xA0, 0x7C, 0x00, 0x00, 0x00, // "y"
        0x00, 0x44, 0x64, 0x54, 0x4C, 0x44, 0x00, 0x00, // "z"
        0x00, 0x08, 0x36, 0x41, 0x00, 0x00, 0x00, 0x00, // "{"
        0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, // "|"
        0x00, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00, // "}"
        0x00, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00  // "~"
    ]
    const extendedCharacters: int8[] = [
        0x00, 0x7D, 0x0A, 0x09, 0x0A, 0x7D, 0x00, 0x00, // "Ä"
        0x00, 0x3D, 0x42, 0x41, 0x42, 0x3D, 0x00, 0x00, // "Ö"
        0x00, 0x3D, 0x40, 0x40, 0x40, 0x3D, 0x00, 0x00, // "Ü"
        0x00, 0x21, 0x54, 0x54, 0x55, 0x78, 0x00, 0x00, // "ä"
        0x00, 0x39, 0x44, 0x44, 0x39, 0x00, 0x00, 0x00, // "ö"
        0x00, 0x3D, 0x40, 0x40, 0x7D, 0x00, 0x00, 0x00, // "ü"
        0x00, 0xFE, 0x09, 0x49, 0x36, 0x00, 0x00, 0x00, // "ß"
        0x00, 0x14, 0x3E, 0x55, 0x55, 0x55, 0x14, 0x00, // "€"
        0x00, 0x02, 0x05, 0x02, 0x00, 0x00, 0x00, 0x00, // "°"
        0x00, 0x0A, 0x55, 0x55, 0x55, 0x28, 0x00, 0x00  // "§"
    ]
    function displayCmds(cmds: number[]) {
        for (let i = 0; i < cmds.length; i++) {
            pins.i2cWriteNumber(i2cAddress, commandMode + cmds[i], NumberFormat.UInt16BE)
        }
    }
    /**
     * Initialises the display.
     */
    //% blockId="oled_96x96_initDisplay"
    //% block="initialize OLED"
    export function initDisplay() {
        displayCmds([0xfd, 0x12, 0xae, 0xa8, 0x5f, 0xa1, 0x00, 0xa2,
            0x60, 0xab, 0x01, 0x81, 0x53, 0xb1, 0x51, 0xb3,
            0x01, 0xb9, 0xbc, 0x08, 0xbe, 0x07, 0xb6, 0x01,
            0xd5, 0x62, 0xaf])
        control.waitMicros(100)
        displayCmds([0x75, 0x00, 0x5f, 0x15, 0x08, 0x37])
        setNormalDisplay()
        setHorizontalMode()
        deactivateScroll()
        clearDisplay()
    }
    /**
     * Clears the display.
     */
    //% blockId="oled_96x96_clearDisplay"
    //% block="clear OLED"
    export function clearDisplay() {
        setVerticalMode()
        for (let j = 0; j < 48; j++) {
            for (let i = 0; i < 96; i++) {
                pins.i2cWriteNumber(i2cAddress, dataMode + 0x00, NumberFormat.UInt16BE)
            }
        }
    }
    /**
     * Sets the display to horizontal mode.
     */
    //% blockId="oled_96x96_setHorizontalMode"
    //% advanced=true
    //% block="set OLED to horizontal mode"
    export function setHorizontalMode() {
        displayCmds([0xa0, 0x42, 0x75, 0x00, 0x5f, 0x15, 0x08, 0x37])
    }
    /**
     * Sets the display to vertical mode.
     */
    //% blockId="oled_96x96_setVerticalMode"
    //% advanced=true
    //% block="set OLED to vertical mode"
    export function setVerticalMode() {
        displayCmds([0xa0, 0x46])
    }
    /**
     * Activates scrolling.
     */
    //% blockId="oled_96x96_activateScroll"
    //% advanced=true
    //% block="activate scrolling"
    export function activateScroll() {
        displayCmds([0x2f])
    }
    /**
     * Deactivates scrolling.
     */
    //% blockId="oled_96x96_deactivateScroll"
    //% advanced=true
    //% block="deactivate scrolling"
    export function deactivateScroll() {
        displayCmds([0x2e])
    }
    /**
     * Sets the display to normal mode.
     */
    //% blockId="oled_96x96_setNormalDisplay"
    //% advanced=true
    //% block="set OLED to normal mode"
    export function setNormalDisplay() {
        displayCmds([0xa4])
    }
    /**
     * Sets the display to inverse mode.
     */
    //% blockId="oled_96x96_setInverseDisplay"
    //% advanced=true
    //% block="set OLED to inverse mode"
    export function setInverseDisplay() {
        displayCmds([0xa7])
    }
    function setCursor(row: number, col: number) {
        displayCmds([0x15, 0x08 + (col * 4), 0x37, 0x75, (row * 8), 0x07 + (row * 8)])
    }
    function writeChar(theChar: string, brightness: number) {
        let charBaseIndex = 0
        let standardCharacter = true
        switch (theChar.charCodeAt(0)) {
            case 196:
                charBaseIndex = 0 * 8
                standardCharacter = false
                break;
            case 214:
                charBaseIndex = 1 * 8
                standardCharacter = false
                break;
            case 220:
                charBaseIndex = 2 * 8
                standardCharacter = false
                break;
            case 228:
                charBaseIndex = 3 * 8
                standardCharacter = false
                break;
            case 246:
                charBaseIndex = 4 * 8
                standardCharacter = false
                break;
            case 252:
                charBaseIndex = 5 * 8
                standardCharacter = false
                break;
            case 223:
                charBaseIndex = 6 * 8
                standardCharacter = false
                break;
            case 172:
                charBaseIndex = 7 * 8
                standardCharacter = false
                break;
            case 176:
                charBaseIndex = 8 * 8
                standardCharacter = false
                break;
            case 167:
                charBaseIndex = 9 * 8
                standardCharacter = false
                break;
            default:
                if (theChar.charCodeAt(0) < 32 || theChar.charCodeAt(0) > 126) {
                    theChar = " "
                }
                charBaseIndex = (theChar.charCodeAt(0) - 32) * 8
                standardCharacter = true
                break;
        }
        let charColumn1 = 0
        let charColumn2 = 0
        for (let m = 0; m < 4; m++) {
            if (standardCharacter) {
                charColumn1 = basicFont[charBaseIndex + (m * 2)]
                charColumn2 = basicFont[charBaseIndex + (m * 2) + 1]
            } else {
                charColumn1 = extendedCharacters[charBaseIndex + (m * 2)]
                charColumn2 = extendedCharacters[charBaseIndex + (m * 2) + 1]
            }
            for (let n = 0; n < 8; n++) {
                let pixel1 = charColumn1 % 2
                let pixel2 = charColumn2 % 2
                let data = (pixel1 * 16 * brightness) + (pixel2 * brightness)
                pins.i2cWriteNumber(i2cAddress, dataMode + data, NumberFormat.UInt16BE)
                charColumn1 = charColumn1 / 2
                charColumn2 = charColumn2 / 2
            }
        }
    }
    /**
     * Writes a text at row and column with given brightness.
     */
    //% blockId="oled_96x96_writeText"
    //% block="write text %text|row %row|column %col|brightness %brightness"
    export function writeText(text: string, row: number, col: number, brightness: number) {
        setCursor(row, col)
        for (let p = 0; p < text.length; p++) {
            writeChar(text.substr(p, 1), brightness)
        }
    }
    /**
     * Writes a number with assumed width at row and column with given brightness.
     */
    //% blockId="oled_96x96_writeNumber"
    //% block="write number %theNumber|width %width|row %row|column %col|brightness %brightness"
    export function writeNumber(theNumber: number, width: number, row: number, col: number, brightness: number) {
        let r: number = 0
        let numberLength = theNumber.toString().length
        if (numberLength < width) {
            setCursor(row, col)
            for (r = 0; r < (width - numberLength); r++) {
                writeChar(" ", brightness)
            }
            writeText(theNumber.toString(), row, col, brightness)
        } else if (numberLength > width) {
            setCursor(row, col)
            for (r = 0; r < width; r++) {
                writeChar("*", brightness)
            }
        } else {
            writeText(theNumber.toString(), row, col, brightness)
        }
    }
    /**
     * Sets area, direction and speed for horizontal scrolling.
     */
    //% blockId="oled_96x96_setHorizontalScrollProperties"
    //% advanced=true
    //% block="set scroll direction %scrollRight|first row %startRow|last row %endRow|first column %startColumn|last column %endColumn|scroll speed %scrollSpeed"
    export function setHorizontalScrollProperties(scrollRight: boolean, startRow: number, endRow: number, startColumn: number, endColumn: number, scrollSpeed: number) {
        if (scrollRight) {
            displayCmds([0x27])
        } else {
            displayCmds([0x26])
        }
        displayCmds([0x00, startRow, scrollSpeed, endRow, startColumn + 8, endColumn + 8, 0x00])
    }
}